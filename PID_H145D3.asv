%SIMULATION OF A CYCLIC PITCH INPUT THETA_C=1 DEG GIVEN FROM HOVER 
%0.5 SEC<T<1 SEC. Now from the 15th second a PD controller becomes active 
clear
%INITIAL DATA HELICOPTER
g=9.80665;	
cla=rad2deg(0.1);   %NACA 0012


cds=1.9;
mass=3010;          
rho=0.75145;          % VERANDER DEZE
omega=38.94;
diam=10.8;
R = diam/2;
chord = 0.257;
N=5;                % number of blades
iy=37000;
I_blade=934.94/5;
mast=2.1;
vtip=omega*R;          
area=pi/4*diam^2;
tau=0.1;            %time constant in dynamics inflow!!!
lok=rho*cla*chord*R^4/I_blade;
volh=N*chord/(pi*R);       %rotot solidity	

collect(1)=12*pi/180;   % pilot is not perfectly trimmed, gives a bit too little collective to 'try and improve descend'
longit(1)=1*pi/180;     % also a bit too much forward cyclic to get to the intended location

%initial values;
t0=0;
u0=3.087;     % 6kts to m/s
w0=0;
q0=0;
pitch0=0*pi/180;
x0=0;
labi0=sqrt(mass*g/(area*2*rho))/vtip;
deltah0=0;
z0 = -6;   % initial height of bit less than 20ft

t(1)=t0;
u(1)=u0;
w(1)=w0;
q(1)=q0;
pitch(1)=pitch0;
x(1)=x0;
labi(1)=labi0;
z(1)=z0;
deltah(1)=deltah0;

%INTEGRATION 
aantal=800;
teind=80;
stap=(teind-t0)/aantal;

%CONTROLLER PARAMETERS
% Longitudinal Control Parameters
Kpitchdes=-0.0025;
KcycP=0.7;
KcycD=0.4;
pitchdes=0;
xdes=15;

% Vertical Control Parameters
Kcdes=0.1;
KcollP=0.8;
KcollI=4;
cdes=0;
hdes=3;  % DESIRED HEIGHT 3 m (=10ft)

for i=1:aantal 
    
c(i)=u(i)*sin(pitch(i))-w(i)*cos(pitch(i));
h(i)=-z(i);
   
   if t(i)>=0
       % CYCLIC CONTROLLER
       pitchdes = Kpitchdes*(xdes-x(i)) + 0.02*u(i);
       longitgrd(i) = KcycP*(pitch(i)-pitchdes)*180/pi + KcycD*q(i)*180/pi;%PD in deg
       longit(i)=longitgrd(i)*pi/180;	%in rad
       
       % COLLECTIVE CONTROLLER
       cdes = Kcdes*(hdes-h(i));
       collectgrd(i)=5+KcollP*(cdes-c(i))+KcollI*deltah(i);
       collect(i)=deg2rad(collectgrd(i));
   else 
       longit(i)=longit(1);
       collect(i)=collect(1);
   end    
   %longit(i)=longitgrd(i)*pi/180;	%in rad
   

%Defining the differential equations

%defining the nondimensional notations
qdiml(i)=q(i)/omega;
vdiml(i)=sqrt(u(i)^2+w(i)^2)/vtip;
if u(i)==0 	if w(i)>0 	phi(i)=pi/2;
        else phi(i)=-pi/2;end
else
phi(i)=atan(w(i)/u(i));
end
if u(i)<0
phi(i)=phi(i)+pi;
end
alfc(i)=longit(i)-phi(i);

mu(i)=vdiml(i)*cos(alfc(i));
labc(i)=vdiml(i)*sin(alfc(i));

%a1 Flapping calculi
teller(i)=-16/lok*qdiml(i)+8/3*mu(i)*collect(i)-2*mu(i)*(labc(i)+labi(i));
a1(i)=teller(i)/(1-.5*mu(i)^2);

%the thrust coefficient
ctelem(i)=cla*volh/4*(2/3*collect(i)*(1+1.5*mu(i)^2)-(labc(i)+labi(i)));
%Thrust coefficient from Glauert
alfd(i)=alfc(i)-a1(i);
ctglau(i)=2*labi(i)*sqrt((vdiml(i)*cos(alfd(i)))^2+(vdiml(i)*...
sin(alfd(i))+labi(i))^2);

%Equations of motion
labidot(i)=ctelem(i); 
thrust(i)=labidot(i)*rho*vtip^2*area;
helling(i)=longit(i)-a1(i);
vv(i)=vdiml(i)*vtip; 		%it is 1/sqrt(u^2+w^2)

udot(i)=-g*sin(pitch(i))-cds/mass*.5*rho*u(i)*vv(i)+...
thrust(i)/mass*sin(helling(i))-q(i)*w(i);

wdot(i)=g*cos(pitch(i))-cds/mass*.5*rho*w(i)*vv(i)-...
thrust(i)/mass*cos(helling(i))+q(i)*u(i);

qdot(i)=-thrust(i)*mast/iy*sin(helling(i));

pitchdot(i)=q(i);

xdot(i)=u(i)*cos(pitch(i))+w(i)*sin(pitch(i));

zdot(i)=-c(i);

labidot(i)=(ctelem(i)-ctglau(i))/tau;
%corrdot(i)=uwens-u(i);
%corrcdot(i)=cwens(i)-c(i);

deltahdot(i) = cdes - c(i);     % ADD STATE FOR REMOVING STEADY-STATE w ERROR

u(i+1)=u(i)+stap*udot(i);
w(i+1)=w(i)+stap*wdot(i);
q(i+1)=q(i)+stap*qdot(i);
pitch(i+1)=pitch(i)+stap*pitchdot(i);
x(i+1)=x(i)+stap*xdot(i);
labi(i+1)=labi(i)+stap*labidot(i);
z(i+1)=z(i)+stap*zdot(i);
t(i+1)=t(i)+stap;
deltah(i+1) = deltah(i) + stap*deltahdot(i);  % ADD STATE FOR REMOVING STEADY-STATE w ERROR
end;

plot(t(1:800), rad2deg(longit), t, x,t, u),...
    legend('Cyclic [deg]', 'Longitudinal Position [m]', 'Longitudinal Velocity u [m/s]'), grid, pause
plot(t(1:800),rad2deg(collect), t, -z, t, w),...
    legend('Collective [deg]', 'Height [m]', 'Vertical Velocity w [m/s]'), grid
